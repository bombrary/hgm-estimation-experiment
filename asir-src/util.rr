module util;

localf dvar, ann_mul, gen_obs_eq;
localf print_pf_as_python_func;
localf pf_from_ideal;
localf pf_as_python_func, pf_as_python_func_allnp;
localf save_Pfs_as_python, save_Pfs_as_cython;
localf lcm_of_denoms;
localf repeat, is_holonomic;
localf p_map_coef, rat_map_coef, deval_pf_coefs;

/*  From Iori's code */
def lcm_of_denoms(Pf) {
	L = length(Pf);
	LCM = 1;

	for( I = 0; I < L; I++){
		TmpD = yang.extract_denom(Pf[I])[1];
		LCM = TmpD * sdiv(LCM, gcd(TmpD, LCM));
	}
	Facs = fctr(LCM);
	L = length(Facs);
	LCM = 1;
	for( I = 0; I < L; I++){
		LCM = LCM * Facs[I][0];
	}
	return ptozp(LCM);
}

def dvar(X) {
  return strtov("d" + rtostr(X));
}

def repeat(X, N) {
  Res = [];
  for (I = 0; I < N; I++) {
    Res = cons(X, Res);
  }
  return Res;
}

def is_holonomic(I, V, DV) {
  V_Weyl = append(V, DV);
  N = length(V);
  Weight = append(repeat(0, N), repeat(1, N));
  IN = nk_restriction.initial_w(I, V_Weyl, Weight);
  H = sm1.hilbert([IN, V_Weyl]);
  return deg(H, h) == N;
}

/* def add_one(C) { return C + 1; } */
/* p_map_coef(x + 2*y + 3, [x, y], add_one) == 2*x + 3*y + 4 */
def p_map_coef(P, Vars, Fun)  {
  Res = 0;
  for (DP = dp_ptod(P, Vars); DP != 0; DP = dp_rest(DP)) {
    Coef = dp_hc(DP);
    Term = dp_ht(DP);
    Res += Fun(Coef) * Term;
  }
  return dp_dtop(Res, Vars);
}

def rat_map_coef(R, Vars, Fun) {
  D = dn(R);
  N = nm(R);

  if (type(D) == 2) {
    NewD = p_map_coef(D, Vars, Fun);
  } else {
    NewD = D;
  }

  if (type(N) == 2) {
    NewN = p_map_coef(N, Vars, Fun);
  } else {
    NewN = N;
  }

  return NewN/NewD;
}

def deval_pf_coefs(Pf, Vars) {
  N = length(Pf);
  Res = vector(N);
  for (I = 0; I < N; I++) {
    Res[I] = map(rat_map_coef, Pf[I], Vars, deval);
  }
  return Res;
}

def ann_mul(I, J, Ivars, Jvars) {
  Ietc = map(dvar, base_set_minus(Jvars, Ivars));
  Jetc = map(dvar, base_set_minus(Ivars, Jvars));
  Vars = base_set_union(Ivars, Jvars);
  DVars = map(dvar, Vars);
  
  return nk_restriction.ann_mul(
      append(I, Ietc),
      append(J, Jetc),
      Vars, DVars
  );
}

def gen_obs_eq(OE) {
  Iv = [dv + v];
  Iy_x = map(os_md.transpdo, Iv, [[v, dv]], [[OE, dx/diff(OE, x)]])$
  Iy_x = map(red, Iy_x)$
  Iy_x = map(nm, Iy_x)$
  Ix_y = map(os_md.transpdo, Iv, [[v, dv]], [[OE, dy/diff(OE, y)]])$
  Ix_y = map(red, Ix_y)$
  Ix_y = map(nm, Ix_y)$
  return append(Iy_x, Ix_y);
}


def pf_as_python_func(Fname, Pfs) {
  L = [];
  for (I = 0; I < length(Pfs); I++) {
    S = "np.array(" + rtostr(matrix_matrix_to_list(Pfs[I])) + ")";
    L = cons(S, L);
  }
  L = reverse(L);

  return "def " + Fname + "(z):\n" +
         "    y, mup, lamp = z\n" +
         "    return " + os_md.str_subst(rtostr(L), "^", "**") + "\n";
}


def pf_as_python_func_allnp(Fname, Pfs) {
  L = vtol(map(matrix_matrix_to_list, Pfs));

  return "def " + Fname + "(z):\n" +
         "    y, mup, lamp = z\n" +
         "    return np.array(" + os_md.str_subst(rtostr(L), "^", "**") + ")\n";
}


def pf_from_ideal(I) {
  G = yang.gr(I);
  S = yang.stdmon(G);
  print(S);
  return yang.pf(S, G);
}


def save_Pfs_as_python(Pfs, Names, Filename) {
  remove_file(Filename);
  output(Filename);
  print("import numpy as np");
  print("from typing import Final");
  print("Gamma: Final = " + rtostr(Gamma));
  print("Sigma: Final = " + rtostr(Sigma));
  print("Var_ob: Final = " + rtostr(Var_ob));
  for (I = 0; I < length(Pfs); I++) {
    print(pf_as_python_func_allnp(Names[I], Pfs[I]));
  }
  output();
}

def save_Pfs_as_cython(Pfs, Filename)  {
  remove_file(Filename);
  output(Filename);

  Preamble = [
    "import numpy as np",
    "cimport numpy as cnp",
    "cimport cython",
    "ctypedef cnp.float64_t DTYPE_t"
  ];
  for (I = 0; I < length(Preamble); I++) {
    print(Preamble[I]);
  }
  print("");

  /* Define functions */
  for (I = 0; I < length(Pfs); I++) {
    Func_name = "phi" + rtostr(I);
    print("cpdef inline cnp.ndarray[DTYPE_t, ndim=3] " + Func_name + "(DTYPE_t[:] z):");
    print("    cdef DTYPE_t y = z[0]");
    print("    cdef DTYPE_t mu = z[1]");
    print("    cdef DTYPE_t sig = z[2]");

    L = matrix_matrix_to_list(Pfs[I]);
    print("    return np.array(" + os_md.str_subst(rtostr(L), "^", "**") + ")");
    print("");
  }
  output();
}

endmodule;

end;
