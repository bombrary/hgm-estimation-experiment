load("nk_restriction.rr")$
load("yang.rr")$
load("os_muldif.rr")$

def pf(I, Vars) {
  yang.define_ring(["partial", Vars]);
  G = yang.gr(I);
  S = yang.stdmon(G);
  print(S);
  return yang.pf(S, G);
}


/* Generators of holonomic ideals for system and measurement noises*/
Ii = [sig*dxi + (xi - mu)];
Imu = [sig*dmu - (x - mu)];
Isig = [2*sig^2*dsig + sig - (x - mu)^2];
Iw = [dw + w]; 
Iv = [dv + v];

/* State and mesurement equations */
SE = [xx - 4/5*x]; 
OE = [y - 2*x/(1+x^2)]; 

/* preparation */
Iy_x = map(os_md.transpdo, Iv, [[v, dv]], [[OE[0], dx/diff(OE[0], x)]]);
Iy_x = map(red, Iy_x)$
Iy_x = map(nm, Iy_x);
Ix_y = map(os_md.transpdo, Iv, [[v, dv]], [[OE[0], dy/diff(OE[0], y)]]);
Ix_y = map(red, Ix_y)$
Ix_y = map(nm, Ix_y);
Ixx_x = map(os_md.transpdo, Iw, [[w, dw]], [[SE[0], dx/diff(SE[0], x)]]);
Ixx_x = map(red, Ixx_x)$
Ixx_x = map(nm, Ixx_x);
Ix_xx = map(os_md.transpdo, Iw, [[w, dw]], [[SE[0], dxx/diff(SE[0], xx)]]);
Ix_xx = map(red, Ix_xx)$
Ix_xx = map(nm, Ix_xx);

Itmp1 = append(Imu, append(Isig, append([dxx], subst(Ii, xi, x, dxi, dx))))$
Itmp2 = append(Ixx_x, append(Ix_xx, [dmu, dsig]))$

Itj = nk_restriction.ann_mul(Itmp1, Itmp2, [x, mu, sig, xx], [dx, dmu, dsig, dxx])$
Itm = nk_restriction.integration_ideal(Itj, [x, mu, sig, xx], [dx, dmu, dsig, dxx], [1,0,0,0])$
Itm = subst(Itm, xx, x, dxx, dx)$

Itmp3 = append(Itm, [dy])$
Itmp4 = append(Iy_x, append(Ix_y, [dmu, dsig]))$
Ioj0 = nk_restriction.ann_mul(Itmp3
                             , Itmp4
                             , [x, mu, sig, y]
                             , [dx, dmu, dsig, dy])$
Ioj1 = nk_restriction.ann_mul([dx^2, x*dx - 1, dmu, dsig, dy]
                             , Ioj0
                             , [x, mu, sig, y]
                             , [dx, dmu, dsig, dy])$
Ioj2 = nk_restriction.ann_mul([dx^3, x^2*dx^2 - 2, x*dx - 2, dmu, dsig, dy]
                             , Ioj0
                             , [x, mu, sig, y]
                             , [dx, dmu, dsig, dy])$

I0 = nk_restriction.integration_ideal(Ioj0, [x, mu, sig, y], [dx, dmu, dsig, dy], [1,0,0,0]);
I1 = nk_restriction.integration_ideal(Ioj1, [x, mu, sig, y], [dx, dmu, dsig, dy], [1,0,0,0]);
I2 = nk_restriction.integration_ideal(Ioj2, [x, mu, sig, y], [dx, dmu, dsig, dy], [1,0,0,0]);

/* [dsig*dy,dsig*dmu,dsig^2,dy,dmu,dsig,1] */
Pf0 = matrix_matrix_to_list(pf(I0, [y, mu, sig]))$
/* [dsig*dy,dsig*dmu,dsig^2,dy,dmu,dsig,1] */
Pf1 = matrix_matrix_to_list(pf(I1, [y, mu, sig]))$
/* [dsig*dy,dsig*dmu,dsig^2,dy,dmu,dsig,1] */
Pf2 = matrix_matrix_to_list(pf(I2, [y, mu, sig]))$

/*
 bsave(Pf0, "asir-src/pf0-iori2020.bin");
 bsave(Pf1, "asir-src/pf1-iori2020.bin");
 bsave(Pf2, "asir-src/pf2-iori2020.bin");
*/

end$
