load("nk_restriction.rr")$
load("yang.rr")$
load("os_muldif.rr")$

def pf(I, Vars) {
  yang.define_ring(["partial", Vars]);
  G = yang.gr(I);
  S = yang.stdmon(G);
  print(S);
  return yang.pf(S, G);
}

def obs_ann(OE, Var_ob) {
  Iv = [dv + v/Var_ob];

  Iy_x = map(os_md.transpdo, Iv, [[v, dv]], [[OE[0], dx/diff(OE[0], x)]]);
  Iy_x = map(red, Iy_x)$
  Iy_x = map(nm, Iy_x);
  Ix_y = map(os_md.transpdo, Iv, [[v, dv]], [[OE[0], dy/diff(OE[0], y)]]);
  Ix_y = map(red, Ix_y)$
  Ix_y = map(nm, Ix_y);

  return append(Iy_x, Ix_y);
}

def gen_pfaffian(K, Var_st, Var_ob) {
  Var_pred = K^2 * sig + Var_st;
  Mu_pred = K*mu;
  Diff = x - Mu_pred;
  Ipred = [Var_pred * dx + Diff
          ,Var_pred * dmu - K * Diff
          ,Var_pred^2*dsig + Var_pred*K^2/2 - K^2*Diff^2/2];

  Iobs = obs_ann([y - 2*x/(1+x^2)], Var_ob); 

  Imul0 = nk_restriction.ann_mul(
            append(Ipred, [dy]),
            append(Iobs, [dmu, dsig]),
            [x, y, mu, sig],
            [dx, dy, dmu, dsig]);
  Imul1 = nk_restriction.ann_mul(
            [dx^2, x*dx - 1, dmu, dsig, dy],
            Imul0,
            [x, mu, sig, y],
            [dx, dmu, dsig, dy]);
  Imul2 = nk_restriction.ann_mul(
            [dx^3, x^2*dx^2 - 2, x*dx - 2, dmu, dsig, dy],
            Imul0,
            [x, mu, sig, y],
            [dx, dmu, dsig, dy]);

  I0 = nk_restriction.integration_ideal(Imul0, [x, mu, sig, y], [dx, dmu, dsig, dy], [1,0,0,0]);
  I1 = nk_restriction.integration_ideal(Imul1, [x, mu, sig, y], [dx, dmu, dsig, dy], [1,0,0,0]);
  I2 = nk_restriction.integration_ideal(Imul2, [x, mu, sig, y], [dx, dmu, dsig, dy], [1,0,0,0]);

  /* [dsig*dy,dsig*dmu,dsig^2,dy,dmu,dsig,1] */
  Pf0 = pf(I0, [y, mu, sig])$
  /* [dsig*dy,dsig*dmu,dsig^2,dy,dmu,dsig,1] */
  Pf1 = pf(I1, [y, mu, sig])$
  /* [dsig*dy,dsig*dmu,dsig^2,dy,dmu,dsig,1] */
  Pf2 = pf(I2, [y, mu, sig])$

  return [Pf0, Pf1, Pf2];
}
