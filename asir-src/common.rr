module common$

localf gen_ann_gauss$
localf gen_ann_phis$

def gen_ann_gauss() {
  /* Vars: [xp, mu, sig] */
  /*L1 = sig*dxp + (xp - mu);
  L2 = sig*dmu - (xp - mu);
  L3 = 2*sig^2*dsig + sig - (xp - mu)^2;
  return [L1, L2, L3];*/


  /* Using a function WeylClosure in the Dmodule package in Macaulay2 */
  return [sig*dxp+xp-mu
         ,sig*dmu-xp+mu
         ,2*sig^2*dsig-xp^2+2*xp*mu-mu^2+sig
         ,dxp+dmu
         ,2*dxp*dsig+2*dmu*dsig
         ,dmu^2-2*dsig
         ,dxp*dmu+dmu^2
         ,sig*dmu-xp+mu
         ,-xp*dmu+mu*dmu+2*sig*dsig+1
         ];
}

def gen_ann_phis(Ist, Iob) {
  Igauss = gen_ann_gauss()$

  Ipred = util.ann_mul(Igauss, Ist, [xp, mu, sig], [x, xp])$
  Ipred = nk_restriction.integration_ideal(Ipred, [xp, x, mu, sig], [dxp, dx, dmu, dsig], [1, 0, 0, 0])$

  Imul0 = util.ann_mul(Ipred, Iob, [x, mu, sig], [x, y])$
  Imul1 = util.ann_mul([dx^2, x*dx - 1], Imul0, [x], [x, mu, sig, y])$
  Imul2 = util.ann_mul([dx^3, x^2*dx^2 - 2, x*dx - 2], Imul0, [x], [x, xp, mu, sig, y])$

  Iphi0 = nk_restriction.integration_ideal(Imul0, [x, y, mu, sig], [dx, dy, dmu, dsig], [1, 0, 0, 0])$
  Iphi1 = nk_restriction.integration_ideal(Imul1, [x, y, mu, sig], [dx, dy, dmu, dsig], [1, 0, 0, 0])$
  Iphi2 = nk_restriction.integration_ideal(Imul2, [x, y, mu, sig], [dx, dy, dmu, dsig], [1, 0, 0, 0])$

  return vector(3, [Iphi0, Iphi1, Iphi2])$
}

endmodule$

end$
