load("yang.rr")$
load("nk_restriction.rr")$
load("os_muldif.rr")$
load("util.rr")$

/* name rule */
/*   x = x_{t}
/*  xp = x_{t-1} */
/* sig = \sigma^{2} */
/* mu = \mu_{t-1} */

def gen_ann_st(C0, C1, C2, D0, D1, D2) {
  /* Vars: [x, xp] */
  S = C0 + C1*xp + C2*xp^2;
  T = D0 + D1*xp + D2*xp^2;
  DS = diff(S, xp);
  DT = diff(T, xp);
  D = x - S;

  L1 = T*dx + D;
  L2 = 2*T^2*dxp - DT*D^2 - 2*DS*T*D + DT*T;

  return [L1, L2];
}

def gen_ann_gauss() {
  /* Vars: [xp, mu, sig] */
  /*L1 = sig*dxp + (xp - mu);
  L2 = sig*dmu - (xp - mu);
  L3 = 2*sig^2*dsig + sig - (xp - mu)^2;
  return [L1, L2, L3];*/

  /* Using a function WeylClosure in the Dmodule package in Macaulay2 */
  return [sig*dxp+xp-mu
         ,sig*dmu-xp+mu
         ,2*sig^2*dsig-xp^2+2*xp*mu-mu^2+sig
         ,dxp+dmu
         ,2*dxp*dsig+2*dmu*dsig
         ,dmu^2-2*dsig
         ,dxp*dmu+dmu^2
         ,sig*dmu-xp+mu
         ,-xp*dmu+mu*dmu+2*sig*dsig+1];
}

def gen_ann_ob(L, Var_ob) {
  /* Vars: [x, y] */
  L1 = dy + (y - L*x)/Var_ob;
  L2 = dx - L*(y - L*x)/Var_ob;
  return [L1, L2];
}


def gen_ann_pred(Igauss, Ist) {
  Vars = [xp, x, mu, sig];
  DVars = [dxp, dx, dmu, dsig];

  Itmp1 = append(Igauss, [dx]);
  Itmp2 = append(Ist, [dmu, dsig]);

  Itmp = nk_restriction.ann_mul(Itmp1, Itmp2, Vars, DVars);
  Ipred = nk_restriction.integration_ideal(Itmp, Vars, DVars, [1, 0, 0, 0]);
  return Ipred;
}

def gen_ann_pred_ob(Ipred, Iob) {
  Vars = [x, mu, sig, y];
  DVars = [dx, dmu, dsig, dy];

  Itmp1 = append(Ipred, [dy]);
  Itmp2 = append(Iob, [dmu, dsig]);

  I = nk_restriction.ann_mul(Itmp1, Itmp2, Vars, DVars);
  return I;
}

def stdmon_test(I, Vars) {
  yang.define_ring(["partial", Vars]);
  Gr = yang.gr(I);
  Sm = yang.stdmon(Gr);
  return Sm;
}

Ist = gen_ann_st(1, 1, 1, 1, 1, 1)$
Igauss = gen_ann_gauss()$
Iob = gen_ann_ob(1, 1)$

Ipred = gen_ann_pred(Igauss, Ist)$

Imul0 = gen_ann_pred_ob(Ipred, Iob)$
Imul1 = util.ann_mul([dx^2, x*dx - 1], Imul0, [x], [x, mu, sig, y])$
Imul2 = util.ann_mul([dx^3, x^2*dx^2 - 2, x*dx - 2], Imul0, [x], [x, mu, sig, y])$

I0 = nk_restriction.integration_ideal(Imul0, [x, mu, sig, y], [dx, dmu, dsig, dy], [1, 0, 0, 0]);
I1 = nk_restriction.integration_ideal(Imul1, [x, mu, sig, y], [dx, dmu, dsig, dy], [1, 0, 0, 0]);
I2 = nk_restriction.integration_ideal(Imul2, [x, mu, sig, y], [dx, dmu, dsig, dy], [1, 0, 0, 0]);

stdmon_test(I0);
stdmon_test(I1);
stdmon_test(I2);

end$
