load("yang.rr")$
load("os_muldif.rr")$
load("nk_restriction.rr")$
load("util.rr")$
load("common.rr")$

yang.define_ring(["partial", [y, mu, sig]])$

def pf(I) {
  G = yang.gr(I);
  S = yang.stdmon(G);
  print(S);
  Pf = yang.pf(S, G);
  return Pf;
}

def gen_pfaffian(K, Var_st, L, Var_ob) {
  Ist = [ dx + (x - K*xp)/Var_st
         , dxp - K*(x - K*xp)/Var_st]$

  Iob = [ dy + (y - L*x)/Var_ob
         , dx - L*(y - L*x)/Var_ob]$

  Iphis = common.gen_ann_phis(Ist, Iob)$

  Pf0s = pf(Iphis[0])$
  Pf1s = pf(Iphis[1])$
  Pf2s = pf(Iphis[2])$

  return [Pf0s, Pf1s, Pf2s];
}

end$
